{
  "version": 3,
  "sources": ["../../vuetify/src/components/VChip/VChip.tsx", "../../vuetify/src/components/VChipGroup/VChipGroup.tsx"],
  "sourcesContent": ["/* eslint-disable complexity */\n// Styles\nimport './VChip.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { defineComponent, EventProp } from '@/util'\nimport { computed } from 'vue'\n\nexport const VChip = defineComponent({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$delete',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete',\n    },\n    label: Boolean,\n    link: {\n      type: Boolean,\n      default: undefined,\n    },\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n\n    onClick: EventProp,\n    onClickOnce: EventProp,\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'span' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'click:close': (e: Event) => true,\n    'update:modelValue': (value: boolean) => true,\n    'group:selected': (val: { value: boolean }) => true,\n    click: (e: MouseEvent | KeyboardEvent) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const link = useLink(props, attrs)\n    const isLink = computed(() => props.link !== false && link.isLink.value)\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (!!group || props.link || link.isClickable.value)\n    )\n\n    function onCloseClick (e: Event) {\n      isActive.value = false\n\n      emit('click:close', e)\n    }\n\n    function onClick (e: MouseEvent) {\n      emit('click', e)\n\n      if (!isClickable.value) return\n\n      link.navigate?.(e)\n      group?.toggle()\n    }\n\n    function onKeyDown (e: KeyboardEvent) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault()\n        onClick(e as any as MouseEvent)\n      }\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar)\n      const hasColor = !group || group.isSelected.value\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable.value,\n              'v-chip--filter': hasFilter,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          tabindex={ isClickable.value ? 0 : undefined }\n          onClick={ onClick }\n          onKeydown={ isClickable.value && !isLink.value && onKeyDown }\n          v-ripple={ [isClickable.value && props.ripple, null] }\n        >\n          { genOverlays(isClickable.value, 'v-chip') }\n\n          { hasFilter && (\n            <VDefaultsProvider\n              key=\"filter\"\n              defaults={{\n                VIcon: { icon: props.filterIcon },\n              }}\n            >\n              <VExpandXTransition>\n                <div\n                  class=\"v-chip__filter\"\n                  v-show={ group.isSelected.value }\n                >\n                  { slots.filter ? slots.filter() : (<VIcon />) }\n                </div>\n              </VExpandXTransition>\n            </VDefaultsProvider>\n          ) }\n\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VAvatar: {\n                  image: props.prependAvatar,\n                },\n                VIcon: {\n                  icon: props.prependIcon,\n                },\n              }}\n            >\n              { slots.prepend\n                ? (\n                  <div class=\"v-chip__prepend\">\n                    { slots.prepend() }\n                  </div>\n                )\n                : props.prependAvatar ? (<VAvatar start />)\n                : props.prependIcon ? (<VIcon start />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { slots.default?.({\n            isSelected: group?.isSelected.value,\n            selectedClass: group?.selectedClass.value,\n            select: group?.select,\n            toggle: group?.toggle,\n            value: group?.value.value,\n            disabled: props.disabled,\n          }) ?? props.text }\n\n          { hasAppend && (\n            <VDefaultsProvider\n              key=\"append\"\n              defaults={{\n                VAvatar: {\n                  image: props.appendAvatar,\n                },\n                VIcon: {\n                  icon: props.appendIcon,\n                },\n              }}\n            >\n              { slots.append\n                ? (\n                  <div class=\"v-chip__append\">\n                    { slots.append() }\n                  </div>\n                )\n                : props.appendAvatar ? (<VAvatar end />)\n                : props.appendIcon ? (<VIcon end />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { hasClose && (\n            <VDefaultsProvider\n              key=\"close\"\n              defaults={{\n                VIcon: {\n                  icon: props.closeIcon,\n                  size: 'x-small',\n                },\n              }}\n            >\n              <div\n                class=\"v-chip__close\"\n                onClick={ onCloseClick }\n              >\n                { slots.close ? slots.close() : (<VIcon />) }\n              </div>\n            </VDefaultsProvider>\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n", "// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { deepEqual, defineComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const VChipGroup = defineComponent({\n  name: 'VChipGroup',\n\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function as PropType<typeof deepEqual>,\n      default: deepEqual,\n    },\n\n    ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        }) }\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"],
  "mappings": "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",
  "names": ["VChipGroupSymbol", "Symbol", "for", "VChipGroup", "defineComponent", "name", "props", "column", "Boolean", "filter", "valueComparator", "type", "Function", "default", "deepEqual", "makeGroupProps", "selectedClass", "makeTagProps", "makeThemeProps", "makeVariantProps", "variant", "emits", "value", "setup", "slots", "themeClasses", "provideTheme", "isSelected", "select", "next", "prev", "selected", "useGroup", "provideDefaults", "VChip", "color", "toRef", "disabled", "useRender", "VChip", "defineComponent", "name", "directives", "Ripple", "props", "activeClass", "String", "appendAvatar", "appendIcon", "IconValue", "closable", "Boolean", "closeIcon", "type", "default", "closeLabel", "draggable", "filter", "filterIcon", "label", "link", "undefined", "pill", "prependAvatar", "prependIcon", "ripple", "text", "modelValue", "onClick", "EventProp", "onClickOnce", "makeBorderProps", "makeDensityProps", "makeElevationProps", "makeGroupItemProps", "makeRoundedProps", "makeRouterProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "makeVariantProps", "variant", "emits", "e", "value", "val", "click", "setup", "attrs", "emit", "slots", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "sizeClasses", "useSize", "themeClasses", "provideTheme", "isActive", "useProxiedModel", "group", "useGroupItem", "VChipGroupSymbol", "useLink", "isLink", "computed", "isClickable", "disabled", "onCloseClick", "navigate", "toggle", "onKeyDown", "key", "preventDefault", "Tag", "hasAppend", "append", "hasClose", "close", "hasFilter", "hasPrepend", "prepend", "hasColor", "isSelected", "selectedClass", "href", "genOverlays", "VIcon", "icon", "VAvatar", "image", "select", "size"]
}
