{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTooltip/VTooltip.tsx"],
  "sourcesContent": ["// Styles\nimport './VTooltip.sass'\n\n// Components\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { computed, mergeProps, ref } from 'vue'\nimport { genericComponent, getUid, omit, useRender } from '@/util'\nimport { filterVOverlayProps, makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Types\nimport type { SlotsToProps } from '@/util'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\nimport type { StrategyProps } from '@/components/VOverlay/locationStrategies'\n\nexport const VTooltip = genericComponent<new () => {\n  $props: SlotsToProps<OverlaySlots>\n}>()({\n  name: 'VTooltip',\n\n  props: {\n    id: String,\n    text: String,\n\n    ...omit(makeVOverlayProps({\n      closeOnBack: false,\n      location: 'end' as const,\n      locationStrategy: 'connected' as const,\n      minWidth: 0,\n      offset: 10,\n      openOnClick: false,\n      openOnHover: true,\n      origin: 'auto' as const,\n      scrim: false,\n      scrollStrategy: 'reposition' as const,\n      transition: false,\n    }), [\n      'absolute',\n      'persistent',\n      'eager',\n    ]),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-tooltip-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const location = computed(() => {\n      return props.location.split(' ').length > 1\n        ? props.location\n        : props.location + ' center' as StrategyProps['location']\n    })\n\n    const origin = computed(() => {\n      return (\n        props.origin === 'auto' ||\n        props.origin === 'overlap' ||\n        props.origin.split(' ').length > 1 ||\n        props.location.split(' ').length > 1\n      ) ? props.origin\n        : props.origin + ' center' as StrategyProps['origin']\n    })\n\n    const transition = computed(() => {\n      if (props.transition) return props.transition\n      return isActive.value ? 'scale-transition' : 'fade-transition'\n    })\n\n    useRender(() => {\n      const [overlayProps] = filterVOverlayProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-tooltip',\n          ]}\n          id={ id.value }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          transition={ transition.value }\n          absolute\n          location={ location.value }\n          origin={ origin.value }\n          persistent\n          role=\"tooltip\"\n          eager\n          activatorProps={ mergeProps({\n            'aria-describedby': id.value,\n          }, props.activatorProps) }\n          _disableGlobalStack\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => slots.default?.(...args) ?? props.text,\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VTooltip = InstanceType<typeof VTooltip>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAoBO,IAAMA,WAAWC,iBAAgB,EAEnC;EACHC,MAAM;EAENC,OAAO;IACLC,IAAIC;IACJC,MAAMD;IAEN,GAAGE,KAAKC,kBAAkB;MACxBC,aAAa;MACbC,UAAU;MACVC,kBAAkB;MAClBC,UAAU;MACVC,QAAQ;MACRC,aAAa;MACbC,aAAa;MACbC,QAAQ;MACRC,OAAO;MACPC,gBAAgB;MAChBC,YAAY;IACd,CAAC,GAAG,CACF,YACA,cACA,OAAO,CACR;EACH;EAEAC,OAAO;IACL,qBAAsBC,WAAmB;EAC3C;EAEAC,MAAOnB,OAAK,MAAa;AAAA,QAAX;MAAEoB;IAAM,IAAC;AACrB,UAAMC,WAAWC,gBAAgBtB,OAAO,YAAY;AACpD,UAAM;MAAEuB;IAAQ,IAAIC,WAAU;AAE9B,UAAMC,MAAMC,OAAM;AAClB,UAAMzB,KAAK0B,SAAS,MAAM3B,MAAMC,MAAO,aAAYwB,KAAK;AAExD,UAAMG,UAAUC,IAAG;AAEnB,UAAMtB,WAAWoB,SAAS,MAAM;AAC9B,aAAO3B,MAAMO,SAASuB,MAAM,GAAG,EAAEC,SAAS,IACtC/B,MAAMO,WACNP,MAAMO,WAAW;IACvB,CAAC;AAED,UAAMM,SAASc,SAAS,MAAM;AAC5B,aACE3B,MAAMa,WAAW,UACjBb,MAAMa,WAAW,aACjBb,MAAMa,OAAOiB,MAAM,GAAG,EAAEC,SAAS,KACjC/B,MAAMO,SAASuB,MAAM,GAAG,EAAEC,SAAS,IACjC/B,MAAMa,SACNb,MAAMa,SAAS;IACrB,CAAC;AAED,UAAMG,aAAaW,SAAS,MAAM;AAChC,UAAI3B,MAAMgB;AAAY,eAAOhB,MAAMgB;AACnC,aAAOK,SAASH,QAAQ,qBAAqB;IAC/C,CAAC;AAEDc,cAAU,MAAM;AACd,YAAM,CAACC,YAAY,IAAIC,oBAAoBlC,KAAK;AAEhD,aAAA,YAAA,UAAA,WAAA;QAAA,OAEU4B;QAAO,SACN,CACL,WAAW;QACZ,MACI3B,GAAGiB;MAAK,GACRe,cAAY;QAAA,cACPZ,SAASH;QAAK,uBAAA,YAAdG,SAASH,QAAK;QAAA,cACXF,WAAWE;QAAK,YAAA;QAAA,YAElBX,SAASW;QAAK,UAChBL,OAAOK;QAAK,cAAA;QAAA,QAEhB;QAAS,SAAA;QAAA,kBAEGiB,WAAW;UAC1B,oBAAoBlC,GAAGiB;QACzB,GAAGlB,MAAMoC,cAAc;QAAC,uBAAA;MAAA,GAEnBb,OAAO,GAAA;QAGVc,WAAWjB,MAAMiB;QACjBC,SAAS,WAAA;AAAA,cAAA;AAAA,mBAAA,OAAA,UAAA,QAAIC,OAAI,IAAA,MAAA,IAAA,GAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAJA,iBAAI,IAAA,IAAA,UAAA,IAAA;UAAA;AAAA,mBAAK,iBAAAnB,MAAMkB,YAAO,OAAA,SAAb,eAAA,KAAAlB,OAAgB,GAAGmB,IAAI,MAAKvC,MAAMG;QAAI;MAAA,CAAA;IAIpE,CAAC;AAED,WAAOqC,YAAY,CAAC,GAAGZ,OAAO;EAChC;AACF,CAAC;",
  "names": ["VTooltip", "genericComponent", "name", "props", "id", "String", "text", "omit", "makeVOverlayProps", "closeOnBack", "location", "locationStrategy", "minWidth", "offset", "openOnClick", "openOnHover", "origin", "scrim", "scrollStrategy", "transition", "emits", "value", "setup", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "uid", "getUid", "computed", "overlay", "ref", "split", "length", "useRender", "overlayProps", "filterVOverlayProps", "mergeProps", "activatorProps", "activator", "default", "args", "forwardRefs"]
}
